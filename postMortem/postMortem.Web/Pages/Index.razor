@page "/"
@using postMortem.Data.Model
@inject postMortemWorker Worker
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager

<PageTitle>Home</PageTitle>
<div class="container d-flex justify-content-center align-items-center">
    <div class="row">
        <div class="col">
            <div style="width: 100%;">
                <input type="text" placeholder="Search..." style="width: 100%; height: 50px; box-sizing: border-box; border-radius: 10px;" />
            </div>
            
            <!-- Render a card to create a new post -->
            @if (showNewPostCard)
            {
                <br />
                <div class="card @(showNewPostCard ? "slide-in" : "slide-out")" style="margin: auto; max-width: 60rem;">

                    <div class="card-header d-flex justify-content-between align-items-center">
                        <input type="text" class="form-control" style="font-size: 1.25rem; font-weight: bold;"
                           placeholder="Title" @bind="newPostTitle" />
                        <button class="btn" @onclick="ToggleNewPostCard">X</button>

                    </div>
                    <div class="card-body">
                        <!-- Form to create a new post -->
                        <form>
                            <div class="form-group">
                                <textarea class="form-control" id="newPostMessage" placeholder="Write your post here..."
                                      @bind="newPostMessage" style="width: 100%; height: 150px; overflow-y: auto;"></textarea>
                            </div>
                            <div class="form-group">
                                <label class="label-primary">Tags (Seperate by a space)</label>
                                <InputText @bind-Value=tagsUnsorted class="form-control" />
                            </div>
                            <button class="btn btn-success" style="margin: 10px;" @onclick="SaveNewPost">Submit</button>

                        </form>
                    </div>
                </div>
            }
            @if (!showNewPostCard && currentUser != null)
            {
                <button class="btn btn-primary" style="margin: 10px;" @onclick="CreateNewPost">New Post +</button>
            }
            <!-- Display existing posts -->
            @if (posts != null && posts.Count > 0)
            {
                @foreach (Post post in posts)
                {
                    <br />
                    <PostElement Post="post" />
                }
            }
            else
            {
                <div class="alert alert-info">No posts found.</div>
            }
            <br />
        </div>
    </div>
</div>

@code {
    private List<Post> posts;
    private bool showNewPostCard = false;
    private string newPostTitle = "";
    private string newPostMessage = "";
    private string tagsUnsorted = "";
    private Post newlyCreatedPost; // Store the newly created post here

    private User currentUser;

    private string NewPostCardClass => showNewPostCard ? "slide-in" : "slide-out";

    private void ToggleNewPostCard()
    {
        showNewPostCard = !showNewPostCard;
    }
    protected override async Task OnInitializedAsync()
{
    var allPosts = Worker.Posts.GetAll();
    posts = allPosts.OrderByDescending(post => post.CreatedAt).ToList();

    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    currentUser = await UserManager.GetUserAsync(authState.User);
}

    private void CreateNewPost()
    {
        // Show the "Create New Post" card when the button is clicked
        showNewPostCard = true;
    }

    private void SaveNewPost()
    {
        
        // Validate and save the new post
        if (!string.IsNullOrWhiteSpace(newPostTitle) && !string.IsNullOrWhiteSpace(newPostMessage))
        {
            // Create a new Post object with the current user as the poster
            var newPost = new Post(newPostTitle, newPostMessage, currentUser);
            
            Worker.Posts.Add(newPost);
            // Add the tags.
            string[] tags = tagsUnsorted.Split(' ');
            foreach (string tag in tags)
            {
                Tag chosenTag = Worker.Tags.Get(tag);
                if (chosenTag == null)
                {
                    chosenTag = new Tag(tag, "");
                    Worker.Tags.Add(chosenTag);
                }

                newPost.Tags.Add(chosenTag);
            }
            Worker.SaveChanges();

            // Store the newly created post for rendering
            newlyCreatedPost = newPost;

            // Clear the form and hide the card
            newPostTitle = "";
            newPostMessage = "";
            showNewPostCard = false;
        }
        else
        {
            // Handle validation errors or show a message to the user
            // For example, you can display a validation message
            // or prevent saving if required fields are empty
            // You can also add more sophisticated validation logic here
        }
    }
}
