@page "/Posts/View/{ID}";
@inject postMortemWorker Worker
@inject NavigationManager Navigation
@inject IRefreshService RefreshService;

<Card Style="width:50%;">
    <CardBody>
        <CardText>Posted by <a href="/Profile/@Post.Owner.UserName">@Post.Owner.UserName</a> at @Post.CreatedAt.ToShortTimeString()</CardText>
        <CardTitle>@Post.Title</CardTitle>
        <CardText>@Post.Message</CardText>
        <div class="row">
            <div class="col">
                <VoteElement Entity="Post"/>
                <Button class="btn btn-small" Color="ButtonColor.None" To="#" Type="ButtonType.Link"><Icon Name="IconName.Messenger" /> @Post.GetCommentWeight Comments</Button>
                <Button class="btn btn-small" Color="ButtonColor.None" To="#" Type="ButtonType.Link"><Icon Name="IconName.Share" /> Share</Button>
                <Button class="btn btn-small" Color="ButtonColor.None" To="#" Type="ButtonType.Link"><Icon Name="IconName.Save" /> Save</Button>
            </div>
        </div>
    </CardBody>
</Card>

<CommentEditorElement Parent="Post" />

<br/>
<h2>Comments:</h2>
<br />

@foreach (Comment comment in Post.Comments)
{
    <CommentElement Comment="comment"/>
}

@code
{
    [Parameter]
    public string ID { get; set; }

    [Parameter]
    public Post? Post { get; set; } = new Post();

    protected override void OnInitialized()
    {
        RefreshService.RefreshRequested += OnRefreshRequest;
        Post = Worker.Posts.Get(Int32.Parse(ID));
        base.OnInitialized();
    }

    private void OnRefreshRequest()
    {
        this.StateHasChanged();
    }
}
