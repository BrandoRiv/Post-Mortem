@page "/Settings";
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject postMortemWorker Worker

<div class="container d-flex justify-content-center align-items-center">

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Account settings</h3>
            </div>
        <div class="card-body">
            <EditForm Model=@Settings OnSubmit=@FormSubmitted>
                <DataAnnotationsValidator />
                <ServerSideValidator @ref=validator />

                <Switch @bind-Value="Settings.UseDarkMode" Label="Use dark mode" />
                <Switch @bind-Value="Settings.ShowNSFWContent" Label="Show NSFW content" />
                <Switch @bind-Value="Settings.PrivateAccount" Label="Private account" />
                <ValidationSummary />

                <br />
                <input type="submit" class="btn btn-primary" value="Save" />
            </EditForm>
            </div>
    </div>
</div>


@code
{
    ServerSideValidator validator;

    private UserSettings Settings { get; set; } = new UserSettings();

    /// <summary>
    /// The currently signed in user.
    /// </summary>
    [CascadingParameter] protected UserState User { get; set; }

    /// <summary>
    /// Initialize the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Settings = User.Viewer.Settings;

        StateHasChanged();
    }

    /// <summary>
    /// Save the page changes.
    /// </summary>
    /// <param name="editContext"></param>
    private async void FormSubmitted(EditContext editContext)
    {
        User.Viewer.Settings = Settings;
        Worker.SaveChanges();
    }
}
