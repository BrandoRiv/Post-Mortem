@page "/Posts/New";
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject postMortemWorker Worker
@inject NavigationManager Navigation
@inject IAuthenticationProvider Auth;

<h3>Create a new post!</h3>

<EditForm Model=@Post OnSubmit=@FormSubmitted>
    <DataAnnotationsValidator />
    <ServerSideValidator @ref=validator/>
    <div class="form-group">
        <label class="label-primary">Title</label>
        <InputText @bind-Value=Post.Title class="form-control" />
    </div>
    <div class="form-group">
        <label class="label-primary">Body</label>
        <InputTextArea @bind-Value=Post.Message class="form-control" />
    </div>
    <br />

    <div class="form-group">
        <label class="label-primary">Tags (Seperate by a space)</label>
        <InputText @bind-Value=tagsUnsorted class="form-control" />
    </div>

    <Switch @bind-Value="Post.MarkedNSFW" Label="NSFW" />

    <ValidationSummary />
    <BannedUserElement @ref=bannedUser/>

    @if (!bannedUser.IsBanned)
    {
        <input type="submit" class="btn btn-primary" value="Submit!" />
    }

    <a href="~/"><input type="submit" class="btn btn-primary" value="Cancel" /></a>
</EditForm>

@code 
{
    private BannedUserElement bannedUser = new BannedUserElement();

    ServerSideValidator validator;
    private string tagsUnsorted = "";

    [Parameter]
    public Post? Post { get; set; } = new Post();

    protected override void OnInitialized()
    {
        this.Post = new Post();
    }

    private async void FormSubmitted(EditContext editContext)
    {
        User user = await Auth.GetUser();
        Post.Owner = user;

        if (!editContext.Validate())
        {
            return;
        }

        // Make sure the user has a confirmed email before allowing them to post.
        if (user.EmailConfirmed == false)
        {
            validator.DisplayError("Body", "Your email must be confirmed before posting.");
        }

        // Add the tag.
        string[] tags = tagsUnsorted.Split(' ');
        foreach (string tag in tags)
        {
            Tag chosenTag = Worker.Tags.Get(tag);
            if (chosenTag == null)
            {
                chosenTag = new Tag(tag, "");
                Worker.Tags.Add(chosenTag);
            }

            Post.Tags.Add(chosenTag);
        }


        Worker.Posts.Add(Post);
        Worker.SaveChanges();

        // We're done here.
        Navigation.NavigateTo("/Post/View/" + Post.Id);
    }
}
