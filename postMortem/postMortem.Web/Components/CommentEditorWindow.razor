@inject postMortemWorker Worker
@inject NavigationManager Navigation
@inject UserManager<User> Users
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model=@Comment OnSubmit=@FormSubmitted>
    <DataAnnotationsValidator />

    <br />
    <p>Reply...</p>
    <div class="form-group">
        <div class="row">
            <div class="col">
                <InputTextArea @bind-Value=Comment.Message class="form-control" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <div class="row" style="max-width:200px">
            <div class="col">
                <input type="submit" class="btn btn-outline-primary btn-sm" value="Submit!" style="max-width:80px" /> <div class="divider" />
            </div>

            @if (Parent.EntityType != "Post")
            {
                <div class="col">
                    <input @onclick=OnCancelClick class="btn btn-outline-primary btn-sm" value="Cancel" style="max-width:80px" />
                </div>
            }
        </div>
    </div>
    <ValidationSummary />
</EditForm>
<br />

@code
{
    [Parameter]
    public InteractiveEntity Parent { get; set; }

    [Parameter]
    public Comment? Comment { get; set; } = new Comment();

    [Parameter]
    public EventCallback OnCancel { get; set; }

    protected override void OnInitialized()
    {
        this.Comment = new Comment();
    }

    private async void FormSubmitted(EditContext editContext)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User user = Worker.Users.FirstOrDefault(r => r.UserName == authState.User.Identity.Name);

        // Set properties.
        Comment.Owner = user;
        Comment.Parent = Parent;

        if (!editContext.Validate())
        {
            return;
        }

        Worker.Comments.Add(Comment);
        Worker.SaveChanges();

        StateHasChanged();
    }

    private async Task OnCancelClick()
    {
        await OnCancel.InvokeAsync();
    }
}
