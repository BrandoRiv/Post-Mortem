@inject postMortemWorker Worker

<style>
    .home-button {
        color: white; /* White text color for the button */
        background-color: #6f42c1; /* Purple background color to match your theme */
        border-color: #6f42c1; /* Purple border color to match the background */
        margin-top: 10px; /* Add some space above the button */
    }

        .home-button:hover {
            color: white; /* White text color for hover state */
            background-color: #5c3799; /* Slightly darker purple on hover */
            border-color: #5c3799; /* Slightly darker purple border on hover */
        }
</style>

<Card Style="width:40rem;">
    <CardBody>
        <AuthorizeView>
            <div class="post-heart">
                <InteractiveEntityOptionsElement Entity="Comment" />
            </div>
        </AuthorizeView>
        <CardText>Posted by <a href="/Profile/@Comment.Owner.UserName">@Comment.Owner.UserName</a> at @Comment.CreatedAt.ToShortTimeString() @IsModified()</CardText>
        <CardText>@Comment.Message</CardText>

        @if (ShowBanMessage)
        {
            <CardText>
                <BannedUserElement User="User.Viewer" />
            </CardText>
        }
        <div class="row" style="max-width:30rem;">
            <div class="col">
                <VoteElement Entity="Comment" />
            </div>
            @if (Comment.IsActive)
            {
                <div class="col">
                    <button @onclick="OnShowEditor" class="home-button" disabled="@IsDisabled">Reply</button>
                </div>
            }
        </div>

        @if (ShowEditor)
        {
            <CommentEditorElement @ref=EditorWindow Owner="User.Viewer" Parent="Comment" OnCancel="OnCancelClick" OnComplete="OnCompleteClick" />
        }

        @if (ShowChildren)
        {
            @foreach (Comment child in Comment.Comments)
            {
                <br />
                <CommentElement Comment="child" />
            }
        }
    </CardBody>
</Card>
<br />

@code {
    /// <summary>
    /// Is this element enabled? Do not allow the element to be enabled if the user is not signed in.
    /// </summary>
    private bool IsDisabled = false;

    /// <summary>
    /// Show the editor for this element.
    /// </summary>
    private bool ShowEditor = false;

    /// <summary>
    /// Should we show the ban message?
    /// </summary>
    private bool ShowBanMessage = false;

    /// <summary>
    /// Reference for the editor.
    /// </summary>
    private CommentEditorElement EditorWindow;

    /// <summary>
    /// The comment we should display using this comment.
    /// </summary>
    [Parameter] public Comment Comment { get; set; }

    /// <summary>
    /// Should we show the children of this comment along with the comment?
    /// </summary>
    [Parameter] public bool ShowChildren { get; set; } = true;

    /// <summary>
    /// The currently signed in user.
    /// </summary>
    [CascadingParameter] protected UserState User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (User == null)
        {
            IsDisabled = true;
        }

        await base.OnInitializedAsync();
    }

    private void OnShowEditor()
    {
        if (User.Viewer.IsBanned != null)
        {
            ShowBanMessage = true;
        }
        else
        {
            ShowEditor = true;
        }
    }

    private void OnCancelClick()
    {
        ShowEditor = false;
    }

    private void OnCompleteClick()
    {
        ShowEditor = false;
    }

    private string IsModified()
    {
        if (Comment.CreatedAt != Comment.ModifiedAt)
        {
            return "(Edited, " + Comment.ModifiedAt.ToShortDateString() + ")";
        }

        return "";
    }
}
