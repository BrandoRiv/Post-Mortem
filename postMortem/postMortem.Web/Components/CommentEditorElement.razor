@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject postMortemWorker Worker
@inject NavigationManager Navigation
@inject IRefreshService RefreshService;

<EditForm Model=@Comment OnSubmit=@FormSubmitted>
    <DataAnnotationsValidator />
    <br />
    <p>Reply...</p>
    <div class="form-group">
        <div class="row">
            <div class="col">
                <InputTextArea @bind-Value=Comment.Message class="form-control" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <div class="row" style="max-width:200px">
            <div class="col">
                <input type="submit" class="btn btn-outline-primary btn-sm" value="Submit!" style="max-width:80px" /> <div class="divider" />
            </div>

            @if (Parent.EntityType != "Post")
            {
                <div class="col">
                    <input @onclick=OnCancelClick class="btn btn-outline-primary btn-sm" value="Cancel" style="max-width:80px" />
                </div>
            }
        </div>
    </div>
    <ValidationSummary />
</EditForm>
<br />

@code
{
    /// <summary>
    /// Is this element disabled?
    /// </summary>
    private bool IsDisabled = false;

    /// <summary>
    /// Are we modifying an element?
    /// </summary>
    [Parameter] public bool IsEditing { get; set; }

    /// <summary>
    /// The user creating the comment.
    /// </summary>
    [Parameter, EditorRequired] public User Owner { get; set; }

    /// <summary>
    /// Set the parent this comment will belong to.
    /// </summary>
    [Parameter] public InteractiveEntity Parent { get; set; }

    /// <summary>
    /// Gets or sets the comment. Keep this null unless you're wanting to modify a comment.
    /// </summary>
    [Parameter] public Comment? Comment { get; set; } = new Comment();

    /// <summary>
    /// Event called when the click button is called.
    /// </summary>
    [Parameter] public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Event called when the element is complete.
    /// </summary>
    [Parameter] public EventCallback OnComplete { get; set; }

    /// <summary>
    /// Initialize the component.
    /// </summary>
    protected override void OnInitialized()
    {
        this.RefreshService.RefreshRequested += OnRefresh;
    }

    /// <summary>
    /// The user has asked to submit the form.
    /// </summary>
    /// <param name="editContext"></param>
    private async void FormSubmitted(EditContext editContext)
    {
        // Make sure we can grab the user.
        if (Owner == null)
        {
            return;
        }

        // Set properties.
        Comment.Owner = Owner;
        Comment.Parent = Parent;

        // We have to set some properties so we can validate.
        if (!editContext.Validate())
        {
            return;
        }

        if (!IsEditing)
        {
            // Add the comment.
            Worker.Comments.Add(Comment);
        }
        else
        {
            Comment.ModifiedAt = DateTime.Now;
        }

        Worker.SaveChanges();

        // Request the parent refreshes to stop any issues we may see 
        // with EntityFramework trying to add duplicate entries.
        RefreshService.CallRequestRefresh();

        await OnCompleteClick();
    }

    /// <summary>
    /// Refresh the component. Delete the existing component.
    /// </summary>
    protected virtual void OnRefresh()
    {
        this.Comment = new Comment();
        this.StateHasChanged();
    }

    /// <summary>
    /// Cancel has been clicked.
    /// </summary>
    /// <returns></returns>
    private async Task OnCancelClick()
    {
        await OnCancel.InvokeAsync();
        OnRefresh();
    }

    /// <summary>
    /// Complete has been clicked.
    /// </summary>
    /// <returns></returns>
    private async Task OnCompleteClick()
    {
        await OnComplete.InvokeAsync();
        OnRefresh();
    }
}
