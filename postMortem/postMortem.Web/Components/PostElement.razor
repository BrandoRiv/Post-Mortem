@inject postMortemWorker Worker
@inject NavigationManager NavigationManager

<Card Style="width:50rem;" @onclick="NavigateToPost">
    <CardBody Style="padding: 20px;" @onclick="NavigateToPost">
        <AuthorizeView>
            <div class="post-heart" @onclick:stopPropagation="true">
                <Button class="btn btn-small" Color="ButtonColor.Danger" @onclick="OnFavoriteClick" Type="ButtonType.Button">
                    <Icon Name="@IsFavorited" />
                </Button>
                <InteractiveEntityOptionsElement Entity="Post" />
            </div>
        </AuthorizeView>
        <CardTitle class="post-title">@Post.Title</CardTitle>
        <CardText class="subtitle">
            <a href="/Account/@Post.Owner.UserName" @onclick:stopPropagation="true">@Post.Owner.UserName</a> 
            @Post.CreatedAt.ToShortTimeString()
        </CardText>
        <CardText class="card-text-container">@Post.Message</CardText>
        <div>
            <img src="css/icons/tag.png" alt="Comment" class="comment-icon"/>
            @foreach (Tag tag in Post.Tags)
            {
                <a href="/Tags?Name=@tag.Name" @onclick:stopPropagation="true">
                    <Badge Color="BadgeColor.Primary" class="lowercase">#@tag.Name</Badge>
                </a>
                <div class="divider" />
            }
        </div>
        <div class="row">
            <div class="col" @onclick:stopPropagation="true">
                <VoteElement Entity="Post" />
            </div>
            <div class="col">
                <Button class="btn" Color="ButtonColor.None" To="@ViewURL" Type="ButtonType.Link">
                    <img src="css/icons/comment.png" alt="Comment" class="comment-icon"/>
                    @Post.GetCommentWeight Comments
                </Button>
            </div>
        </div>
    </CardBody>
</Card>

@code {
    private IconName IsFavorited = IconName.Heart;

    [Parameter] public Post? Post { get; set; } = new Post();

    [CascadingParameter] protected UserState User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateFavoriteStatus();
        await base.OnInitializedAsync();
    }

    protected async Task UpdateFavoriteStatus(bool change = false)
    {
        if (User.Viewer == null)
        {
            return;
        }

        FavoritePost favorited = User.Viewer.Favorites.FirstOrDefault(r => r.Post.Id == Post.Id);

        if (change)
        {
            if (favorited != null)
            {
                Worker.Favorites.Remove(favorited);
                favorited = null;
            }
            else
            {
                favorited = new FavoritePost(User.Viewer, Post);
                Worker.Favorites.Add(favorited);
            }

            Worker.SaveChanges();
        }

        if (favorited != null)
        {
            IsFavorited = IconName.HeartFill;
        }
        else
        {
            IsFavorited = IconName.Heart;
        }

        StateHasChanged();
    }

    private string ViewURL
    {
        get { return "/Posts/View/" + Post.Id; }
    }

    private string IsModified()
    {
        return Post.CreatedAt != Post.ModifiedAt ? "(Edited, " + Post.ModifiedAt.ToShortDateString() + ")" : "";
    }

    private async Task OnFavoriteClick()
    {
        await UpdateFavoriteStatus(true);
    }

    private void NavigateToPost()
    {
        var targetUrl = $"/Posts/View/{Post.Id}";
        if (!NavigationManager.Uri.EndsWith(targetUrl))
        {
            NavigationManager.NavigateTo(targetUrl);
        }
    }


}
