@inject postMortemWorker Worker
@inject IAuthenticationProvider Auth;

<Card Style="width:40rem;">
    <CardBody>
        <AuthorizeView>
            <div class="post-heart">
                <Button class="btn btn-small" Color="ButtonColor.Danger" @onclick="OnFavoriteClick" Type="ButtonType.Button"><Icon Name="@IsFavorited" /></Button>
                <InteractiveEntityOptionsElement Entity="Post"/>
            </div>
        </AuthorizeView>
        <CardText>Posted by <a href="/Account/@Post.Owner.UserName">@Post.Owner.UserName</a> at @Post.CreatedAt.ToShortTimeString()</CardText>
            <CardTitle>@Post.Title</CardTitle>
            <CardText>@Post.Message</CardText>
            <CardText>
            @foreach(Tag tag in Post.Tags)
            {
                <a href="/Tags?Name=@tag.Name"><Badge Color="BadgeColor.Primary">@tag.Name</Badge></a>
                <div class="divider"/>
            }
            </CardText>
            <div class="row">
                <div class="col">
                    <VoteElement Entity="Post" />
                </div>
                <div class="col">
                    <Button class="btn btn-small" Color="ButtonColor.None" To="@ViewURL" Type="ButtonType.Link"><Icon Name="IconName.Messenger" /> @Post.GetCommentWeight Comments</Button>
            </div>
        </div>
    </CardBody>
</Card>

@code 
{
    /// <summary>
    /// Tells whether the post is favorited.
    /// </summary>
    private IconName IsFavorited = IconName.Heart;

    /// <summary>
    /// Gets or sets the post for this element to display.
    /// </summary>
    [Parameter] public Post? Post { get; set; } = new Post();

    /// <summary>
    /// Initialize the element.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await UpdateFavoriteStatus();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Update the favorite status for the user on this element.
    /// </summary>
    protected async Task UpdateFavoriteStatus(bool change = false)
    {
        User User = await Auth.GetUser();

        FavoritePost favorited = Worker.Favorites.FirstOrDefault
            (r => r.User == User && r.Post.Id == Post.Id);

        if (change)
        {
            if (favorited != null)
            {
                Worker.Favorites.Remove(favorited);
                favorited = null;
            }
            else
            {
                favorited = new FavoritePost(User, Post);
                Worker.Favorites.Add(favorited);
            }

            Worker.SaveChanges();
        }

        if (favorited != null)
        {
            IsFavorited = IconName.HeartFill;
        }
        else
        {
            IsFavorited = IconName.Heart;
        }

        StateHasChanged();
    }

    /// <summary>
    /// Gets the URL of the post. Using the razor page it likes to act up.
    /// </summary>
    private string ViewURL
    {
        get { return "/Posts/View/" + Post.Id; }
    }

    /// <summary>
    /// Update the favorite status.
    /// </summary>
    /// <returns></returns>
    private async Task OnFavoriteClick()
    {
        await UpdateFavoriteStatus(true);
    }
}
