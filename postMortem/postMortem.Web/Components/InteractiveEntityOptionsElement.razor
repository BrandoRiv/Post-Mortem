@inject postMortemWorker Worker
@inject IRefreshService RefreshService;

<Dropdown Size="Size.Small">
    <DropdownToggleButton Color="ButtonColor.None"><Icon Name="IconName.Gear" /></DropdownToggleButton>
    <DropdownMenu>
        @if (Entity.Owner == User.Viewer && !Entity.Archived)
        {
            <DropdownItem To="@GetEditUrl()" Type="ButtonType.Link">Edit</DropdownItem>
            <DropdownItem @onclick="ShowDeleteDialog" Type="ButtonType.Link" Style="color: red;">Delete</DropdownItem>
        }

        @if (Entity.Owner != User.Viewer)
        {
            <DropdownItem To="#" Type="ButtonType.Link">Report</DropdownItem>
        }

        @if (HasAdminAccess)
        {
            <DropdownDivider />
            @if (Entity.EntityType == "Post")
            {
                <DropdownItem @onclick=ShowArchiveDialog Type="ButtonType.Link">Archive</DropdownItem>
            }

            <DropdownItem To="@GetBanUrl()" Type="ButtonType.Link" Style="color: red; font-weight:bold;">Ban</DropdownItem>
        }
    </DropdownMenu>
</Dropdown>

<ConfirmDialog @ref=deleteDialog />

@code 
{
    /// <summary>
    /// Ban dialog for moderators.
    /// </summary>
    private ConfirmDialog deleteDialog { get; set; }

    /// <summary>
    /// Does this user have admin access?
    /// </summary>
    private bool HasAdminAccess = false;

    /// <summary>
    /// The entity to tie these elements to.
    /// </summary>
    [Parameter, EditorRequired] public InteractiveEntity Entity { get; set; }

    /// <summary>
    /// The currently signed in user.
    /// </summary>
    [CascadingParameter] protected UserState User { get; set; }

    /// <summary>
    /// Initialize the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        if (User.HasRole("Moderator"))
        {
            HasAdminAccess = true;
        }

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// The edit URL changes depending on the component.
    /// </summary>
    /// <returns></returns>
    private string GetEditUrl()
    {
        return string.Format("/{0}/Edit/{1}", Entity.EntityType, Entity.Id);
    }

    /// <summary>
    /// Get the ban URL.
    /// </summary>
    /// <returns></returns>
    private string GetBanUrl()
    {
        return "/Admin/Ban/" + Entity.EntityType + "/" + Entity.Id;
    }

    /// <summary>
    /// Show the delete button.
    /// </summary>
    /// <returns></returns>
    private async Task ShowDeleteDialog()
    {
        var confirmation = await deleteDialog.ShowAsync(
            title: "Are you sure you want to delete this post?",
            message1: "This action cannot be reversed");

        if (confirmation)
        {
            try
            {
                if (Entity.EntityType == "Post")
                {
                    Entity.Delete(Worker);
                    Worker.Posts.Remove((Post)Entity);
                }
                else if (Entity.EntityType == "Comment")
                {
                    Entity.Delete(Worker);
                    Worker.Comments.Remove((Comment)Entity);
                }

                Worker.SaveChanges();
            }
            catch (Exception e)
            {
                string b = "";
            }

            // Request the parent refreshes to stop any issues we may see
            // with EntityFramework trying to add duplicate entries.
            RefreshService.CallRequestRefresh();
        }
    }

    /// <summary>
    /// Ask the moderator if they'd like to archive the post
    /// </summary>
    /// <returns></returns>
    private async Task ShowArchiveDialog()
    {
        var confirmation = await deleteDialog.ShowAsync(
            title: "Are you sure you want to archive this post?",
            message1: "This action cannot be reversed");

        if (confirmation)
        {
            Entity.Archive();
        }

        Worker.SaveChanges();
    }
}
