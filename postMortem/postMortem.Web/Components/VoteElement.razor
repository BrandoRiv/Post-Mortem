@inject postMortemWorker Worker

<div class="row">
    <div class="col" style="margin-top:7px; max-width:@(Entity.GetVotes().ToString().Count() * 20)px;">
       <b>@Entity.GetVotes()</b>
    </div>
    @if (Entity.IsActive)
    {
        <div class="col" style="max-width:40px; margin-right: 20px;">
    <Button class="btn btn-small" @onclick="@OnUpClick" Color="@UpColor" Type="ButtonType.Link" Disabled=@IsDisabled>
        <img src="@UpvoteIcon" alt="Upvote" width="30" height="30"/>
    </Button>
    </div>
    <div class="col" style="max-width:40px;">
        <Button class="btn btn-small" @onclick="@OnDownClick" Color="@DownColor" Type="ButtonType.Link" Disabled=@IsDisabled>
            <img src="@DownvoteIcon" alt="Downvote" width="30" height="30"/>
        </Button>
    </div>
    }
</div>

@code 
{
    /// <summary>
    /// Default colors for background of up buttons.
    /// </summary>
    private const ButtonColor Up = ButtonColor.None;
    private const ButtonColor UpSelected = ButtonColor.Info;

    /// <summary>
    /// Default colors for background of down button.
    /// </summary>
    private const ButtonColor Down = ButtonColor.None;
    private const ButtonColor DownSelected = ButtonColor.Danger;

    /// <summary>
    /// Tells whether this entity is disabled because the user is not signed in.
    /// </summary>
    private bool IsDisabled = false;

    /// <summary>
    /// Represents the entity this vote should go towards.
    /// </summary>
    [Parameter, EditorRequired] public InteractiveEntity Entity { get; set; }
    [CascadingParameter] protected UserState User { get; set; }
    private string UpvoteIcon = "css/icons/Upvotev2nc.png";
    private string DownvoteIcon = "css/icons/downvotev2nc.png"; // Replace with the initial downvote icon path
    private ButtonColor UpColor = ButtonColor.None; // Default color
    private ButtonColor DownColor = ButtonColor.None; // Default color


    /// <summary>
    /// Initialize the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        if (User.Viewer == null)
        {
            IsDisabled = true;
        }

        // Update the vote.
        await UpdateVoteType();

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Update the screen with the chosen vote type of the user.
    /// </summary>
    /// <returns></returns>
    protected virtual async Task UpdateVoteType()
{
    Vote voteGiven = GetUsersVote();

    // User has no vote
        if (voteGiven == null)
        {
            UpColor = Up; // Up is ButtonColor.None or another ButtonColor
            DownColor = Down; // Down is ButtonColor.None or another ButtonColor
        }
        else
        {
            // User likes it
            if (voteGiven.VoteType == 1)
            {
                UpColor = UpSelected; // UpSelected is a ButtonColor
                DownColor = Down; // Down is ButtonColor.None or another ButtonColor
            }

            // User does not like it
            if (voteGiven.VoteType == -1)
            {
                UpColor = Up; // Up is ButtonColor.None or another ButtonColor
                DownColor = DownSelected; // DownSelected is a ButtonColor
            }
        }
    }


    /// <summary>
    /// Called when the user clicks on the upvote button.
    /// </summary>
    protected virtual async void OnUpClick()
    {
        // Change the Upvote icon to another image upon click
        UpvoteIcon = "css/icons/Upvote.png";
        DownvoteIcon = "css/icons/downvotev2nc.png";
        HandleClick(1);
    }

    /// <summary>
    /// Called when the user clicks on the downvote button.
    /// </summary>
    protected virtual async void OnDownClick()
    {
        // Change the Downvote icon to another image upon click
        DownvoteIcon = "css/icons/Downvote.png";
        UpvoteIcon = "css/icons/Upvotev2nc.png";
        HandleClick(-1);
    }

    /// <summary>
    /// Handle the user clicking one of the vote buttons.
    /// </summary>
    /// <param name="voteType"></param>
    private void HandleClick(int voteType)
    {
        Vote voteGiven = GetUsersVote();

        // User would like to remove their vote.
        if (voteGiven != null && voteGiven.VoteType == voteType)
        {
            Worker.Votes.Remove(voteGiven);
        }
        // User would like to change their vote.
        else if (voteGiven != null)
        {
            voteGiven.VoteType = voteType;
        }
        // User is creating first vote.
        else
        {
            voteGiven = new Vote(User.Viewer, Entity, voteType);
            Worker.Votes.Add(voteGiven);
        }

        // Update votes.
        Worker.SaveChanges();

        // Update screen.
        UpdateVoteType();
    }

    /// <summary>
    /// Get the current users vote, or return null if none found.
    /// </summary>
    /// <returns></returns>
    private Vote GetUsersVote()
    {
        if (IsDisabled)
            return null;

        return Entity.VotesGiven.FirstOrDefault(r => r.Giver == User.Viewer); ;
    }
}
