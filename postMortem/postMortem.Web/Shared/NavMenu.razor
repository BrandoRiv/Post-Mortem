@using BlazorBootstrap;


<Sidebar @ref="sidebar"
         IconName="IconName.HeartFill"
         Title="PostMortem"
         BadgeText="v0.0.1"
         DataProvider="SidebarDataProvider" />

<style>
    :root {
        --bb-sidebar-width: 270px;
        --bb-sidebar-collapsed-width: 50px;
        --bb-sidebar-background-color: rgba(234, 234, 234, 1);
        --bb-sidebar-top-row-background-color: rgba(0,0,0,0.08);
        --bb-sidebar-top-row-border-color: rgb(194,192,192);
        --bb-sidebar-title-text-color: rgb(0,0,0);
        --bb-sidebar-brand-icon-color: #6f42c1;
        --bb-sidebar-brand-image-width: 24px;
        --bb-sidebar-brand-image-height: 24px;
        --bb-sidebar-title-badge-text-color: rgb(255,255,255);
        --bb-sidebar-title-badge-background-color: rgba(25,135,84,var(--bs-bg-opacity,1));
        --bb-sidebar-navbar-toggler-icon-color: rgb(0,0,0);
        --bb-sidebar-navbar-toggler-background-color: rgba(0,0,0,0.08);
        --bb-sidebar-content-border-color: rgb(194,192,192);
        --bb-sidebar-nav-item-text-color: rgba(0,0,0,0.9);
        --bb-sidebar-nav-item-text-active-color-rgb: 0,0,0;
        --bb-sidebar-nav-item-text-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.9);
        --bb-sidebar-nav-item-text-active-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.9);
        --bb-sidebar-nav-item-background-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
        --bb-sidebar-nav-item-group-background-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
    }
</style>

@code 
{
    /// <summary>
    /// The currently signed in user.
    /// </summary>
    [CascadingParameter] protected UserState User { get; set; }

    private Sidebar sidebar;
    private IEnumerable<NavItem> navItems = null;

    private async Task<IEnumerable<NavItem>> GetNavItems()
    {
        List<NavItem> navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Home"},
        };

        if (User.Viewer != null)
        {
            navItems.AddRange
            (new List<NavItem>{
                new NavItem { Id = "2", IconName = IconName.LayoutSidebarInset, Text = "Me", IconColor = IconColor.Primary },
                new NavItem { Id = "3", Href = "/Account/" + User.Viewer.UserName, IconName = IconName.PersonBadge, Text = "My Account", ParentId="2"},
                new NavItem { Id = "4", Href = "/Favorite", IconName = IconName.HeartFill, Text = "Favorites", ParentId="2"},
                new NavItem { Id = "5", Href = "/Settings", IconName = IconName.Gear, Text = "Settings", ParentId="2"}
                });
        }

        if (User.HasRole("Moderator", "Admin"))
        {
            navItems.AddRange
            (new List<NavItem>{
                new NavItem { Id = "6", IconName = IconName.Lock, Text = "Admin", IconColor = IconColor.Danger },
                new NavItem { Id = "7", Href = "/Admin/Reports", IconName = IconName.EnvelopePaperFill, Text = "Reports", ParentId = "6" },
                new NavItem { Id = "8", Href = "/Admins", IconName = IconName.PersonAdd, Text = "Admins", ParentId = "6" }
            });
        }

        return navItems;
    }

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = await GetNavItems();
        return await Task.FromResult(request.ApplyTo(navItems));
    }
    private void ToogleSidebar() => sidebar.ToggleSidebar();
}
