@inherits LayoutComponentBase
@inject postMortemWorker Worker
@inject UserManager<User> UserMan;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>postMortem.Web</PageTitle>

<div class="page" >
    <div class="left-sidebar">
        <!-- Left sidebar content -->
    </div>

    <div class="right-sidebar">
        <!-- Right sidebar content -->
    </div>
    <CascadingValue Value="@CurrentUserState" IsFixed=false>
        <main>
            <div class="top-row px-4 auth">
            <img src="css/icons/pmlogo.png" alt="post mortem" style="max-width: 100%; max-height: 100%; height: auto; width: auto; float: left; margin-right: 10%;" />

            @if (IsUserLoggedIn)
            {
                <div class="dropdown" style="float: left;">
                    <a class="image-text-button dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="css/icons/myaccount.png" alt="Account" style="max-width: 10%; max-height: 10%; height: auto; width: auto; margin-right: 1%;" />
                        @(CurrentUserState.Viewer.UserName)
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                        <li><a class="dropdown-item" href="Identity/Account/Manage">Account</a></li>
                        <li><a class="dropdown-item" href="/Favorites">Favorites</a></li>
                        <li><a class="dropdown-item" href="@("/Account/" + CurrentUserState.Viewer.UserName)">History</a></li>
                    </ul>
                </div>
                <LoginDisplay />
            }
            else
            {
                <LoginDisplay />
            }
            <a href="/Settings" target="_blank">Settings</a>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>
            <article class="content px-4">@Body</article>
        </main>
    </CascadingValue>
</div>

@code
{
    public UserState CurrentUserState { get; set; }
    private bool IsUserLoggedIn = false;

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStat;
        var user = authState.User;

        CurrentUserState = new UserState();

        if (user.Identity.IsAuthenticated)
        {
            CurrentUserState.Viewer = Worker.Users.GetByUsername(user.Identity.Name);
            if (CurrentUserState.Viewer != null)
            {
                IsUserLoggedIn = true;
                var roles = Worker.Context.UserRoles.Where(r => r.UserId == CurrentUserState.Viewer.Id).ToList();
                foreach (var role in roles)
                {
                    CurrentUserState.Roles.Add(Worker.Context.Roles.FirstOrDefault(r => r.Id == role.RoleId).Name);
                }
            }
        }

        await base.OnInitializedAsync();
    }
}
